
Day04_Assign1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c2b  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000037c  00000000  00000000  00020c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00021018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000084  00000000  00000000  000210e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001802e  00000000  00000000  00021164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000fbf  00000000  00000000  00039192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008b89b  00000000  00000000  0003a151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001cc  00000000  00000000  000c59ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000c5bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080005b4 	.word	0x080005b4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	080005b4 	.word	0x080005b4

080001e8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <DelayMs+0x44>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <DelayMs+0x48>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <DelayMs+0x4c>)
 80001fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000200:	099b      	lsrs	r3, r3, #6
 8000202:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	fb02 f303 	mul.w	r3, r2, r3
 800020c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800020e:	bf00      	nop
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <DelayMs+0x44>)
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	429a      	cmp	r2, r3
 800021c:	d3f8      	bcc.n	8000210 <DelayMs+0x28>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e0001000 	.word	0xe0001000
 8000230:	20000000 	.word	0x20000000
 8000234:	10624dd3 	.word	0x10624dd3

08000238 <LcdBusyWait>:
 *      Author: sunbeam
 */

#include "lcd.h"

void LcdBusyWait(void) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	uint32_t state;
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <LcdBusyWait+0x48>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <LcdBusyWait+0x48>)
 8000244:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000248:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 800024a:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <LcdBusyWait+0x48>)
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LcdBusyWait+0x4c>)
 800024e:	619a      	str	r2, [r3, #24]
	do {
		state = LCD_DATA_GPIO->IDR;
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <LcdBusyWait+0x48>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	607b      	str	r3, [r7, #4]
	} while((state & BV(LCD_BF)) != 0);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f003 0308 	and.w	r3, r3, #8
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f7      	bne.n	8000250 <LcdBusyWait+0x18>
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <LcdBusyWait+0x48>)
 8000262:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000266:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <LcdBusyWait+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <LcdBusyWait+0x48>)
 800026e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40020c00 	.word	0x40020c00
 8000284:	002000c0 	.word	0x002000c0

08000288 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	460a      	mov	r2, r1
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	4613      	mov	r3, r2
 8000296:	71bb      	strb	r3, [r7, #6]

	if(rs == LCD_CMD)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <LcdWriteNibble+0x20>
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002a0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80002a4:	619a      	str	r2, [r3, #24]
 80002a6:	e002      	b.n	80002ae <LcdWriteNibble+0x26>
	else
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002aa:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <LcdWriteNibble+0x60>)
 80002ac:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002b4:	f023 030f 	bic.w	r3, r3, #15
 80002b8:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002bc:	695a      	ldr	r2, [r3, #20]
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	4908      	ldr	r1, [pc, #32]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002c2:	4313      	orrs	r3, r2
 80002c4:	614b      	str	r3, [r1, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ff8b 	bl	80001e8 <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <LcdWriteNibble+0x5c>)
 80002d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80002d8:	619a      	str	r2, [r3, #24]
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40020c00 	.word	0x40020c00
 80002e8:	00400020 	.word	0x00400020

080002ec <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	460a      	mov	r2, r1
 80002f6:	71fb      	strb	r3, [r7, #7]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
 8000302:	79bb      	ldrb	r3, [r7, #6]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4611      	mov	r1, r2
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffb9 	bl	8000288 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 8000316:	7bba      	ldrb	r2, [r7, #14]
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffb3 	bl	8000288 <LcdWriteNibble>
	LcdBusyWait();
 8000322:	f7ff ff89 	bl	8000238 <LcdBusyWait>
	DelayMs(3);
 8000326:	2003      	movs	r0, #3
 8000328:	f7ff ff5e 	bl	80001e8 <DelayMs>
}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <LcdInit>:

void LcdInit(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	DelayMs(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f7ff ff55 	bl	80001e8 <DelayMs>
	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 800033e:	4b34      	ldr	r3, [pc, #208]	; (8000410 <LcdInit+0xdc>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a33      	ldr	r2, [pc, #204]	; (8000410 <LcdInit+0xdc>)
 8000344:	f043 0308 	orr.w	r3, r3, #8
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 800034a:	4b31      	ldr	r3, [pc, #196]	; (8000410 <LcdInit+0xdc>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a30      	ldr	r2, [pc, #192]	; (8000410 <LcdInit+0xdc>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	6313      	str	r3, [r2, #48]	; 0x30

	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <LcdInit+0xe0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <LcdInit+0xe0>)
 800035c:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
 8000360:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <LcdInit+0xe0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a2b      	ldr	r2, [pc, #172]	; (8000414 <LcdInit+0xe0>)
 8000368:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800036c:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <LcdInit+0xe0>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	4a28      	ldr	r2, [pc, #160]	; (8000414 <LcdInit+0xe0>)
 8000374:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000378:	6093      	str	r3, [r2, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <LcdInit+0xe0>)
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	4a25      	ldr	r2, [pc, #148]	; (8000414 <LcdInit+0xe0>)
 8000380:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000384:	60d3      	str	r3, [r2, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <LcdInit+0xe0>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <LcdInit+0xe0>)
 800038c:	f023 030f 	bic.w	r3, r3, #15
 8000390:	6053      	str	r3, [r2, #4]

	LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <LcdInit+0xe0>)
 8000394:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000398:	619a      	str	r2, [r3, #24]

	LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <LcdInit+0xe0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a1d      	ldr	r2, [pc, #116]	; (8000414 <LcdInit+0xe0>)
 80003a0:	f423 4328 	bic.w	r3, r3, #43008	; 0xa800
 80003a4:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <LcdInit+0xe0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1a      	ldr	r2, [pc, #104]	; (8000414 <LcdInit+0xe0>)
 80003ac:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80003b0:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <LcdInit+0xe0>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a17      	ldr	r2, [pc, #92]	; (8000414 <LcdInit+0xe0>)
 80003b8:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80003bc:	6093      	str	r3, [r2, #8]
	LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <LcdInit+0xe0>)
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <LcdInit+0xe0>)
 80003c4:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80003c8:	60d3      	str	r3, [r2, #12]
	LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <LcdInit+0xe0>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <LcdInit+0xe0>)
 80003d0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80003d4:	6053      	str	r3, [r2, #4]

	LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <LcdInit+0xe0>)
 80003d8:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
 80003dc:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 80003de:	20c8      	movs	r0, #200	; 0xc8
 80003e0:	f7ff ff02 	bl	80001e8 <DelayMs>
	LcdWrite(LCD_CMD, LCD_FN_SET);
 80003e4:	2128      	movs	r1, #40	; 0x28
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ff80 	bl	80002ec <LcdWrite>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 80003ec:	210f      	movs	r1, #15
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff7c 	bl	80002ec <LcdWrite>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80003f4:	2106      	movs	r1, #6
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff ff78 	bl	80002ec <LcdWrite>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80003fc:	2101      	movs	r1, #1
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff74 	bl	80002ec <LcdWrite>

	DelayMs(200);
 8000404:	20c8      	movs	r0, #200	; 0xc8
 8000406:	f7ff feef 	bl	80001e8 <DelayMs>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40020c00 	.word	0x40020c00

08000418 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ff5f 	bl	80002ec <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	e00a      	b.n	800044a <LcdPuts+0x32>
		LcdWrite(LCD_DATA, str[i]);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4619      	mov	r1, r3
 800043e:	2001      	movs	r0, #1
 8000440:	f7ff ff54 	bl	80002ec <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	683a      	ldr	r2, [r7, #0]
 800044e:	4413      	add	r3, r2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ee      	bne.n	8000434 <LcdPuts+0x1c>
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	SystemInit();
 8000466:	f000 f821 	bl	80004ac <SystemInit>
			LcdInit();
 800046a:	f7ff ff63 	bl	8000334 <LcdInit>
			LcdPuts(LCD_LINE1, "DESD @ SUNBEAM");
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <main+0x44>)
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	f7ff ffd1 	bl	8000418 <LcdPuts>
			LcdPuts(LCD_LINE2, "GOD BLESS YOU!");
 8000476:	490c      	ldr	r1, [pc, #48]	; (80004a8 <main+0x48>)
 8000478:	20c0      	movs	r0, #192	; 0xc0
 800047a:	f7ff ffcd 	bl	8000418 <LcdPuts>
			for(int i=1;i<17;i++)
 800047e:	2301      	movs	r3, #1
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	e006      	b.n	8000492 <main+0x32>
			{
				LcdWrite(LCD_CMD,LCD_LEFT_shift);
 8000484:	2118      	movs	r1, #24
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ff30 	bl	80002ec <LcdWrite>
			for(int i=1;i<17;i++)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b10      	cmp	r3, #16
 8000496:	ddf5      	ble.n	8000484 <main+0x24>
			}
			return 0;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	080005cc 	.word	0x080005cc
 80004a8:	080005dc 	.word	0x080005dc

080004ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  DWT_Init();
 80004b0:	f000 f802 	bl	80004b8 <DWT_Init>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <DWT_Init+0x58>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a13      	ldr	r2, [pc, #76]	; (8000510 <DWT_Init+0x58>)
 80004c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004c6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <DWT_Init+0x58>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <DWT_Init+0x58>)
 80004ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d2:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <DWT_Init+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <DWT_Init+0x5c>)
 80004da:	f023 0301 	bic.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <DWT_Init+0x5c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <DWT_Init+0x5c>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <DWT_Init+0x5c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004f2:	bf00      	nop
    __ASM volatile ("NOP");
 80004f4:	bf00      	nop
    __ASM volatile ("NOP");
 80004f6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <DWT_Init+0x5c>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000edf0 	.word	0xe000edf0
 8000514:	e0001000 	.word	0xe0001000

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f7ff ffc6 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f811 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff ff89 	bl	8000460 <main>

0800054e <LoopForever>:

LoopForever:
  b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800055c:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000560:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000564:	20000020 	.word	0x20000020

08000568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>
	...

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4d0d      	ldr	r5, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1b64      	subs	r4, r4, r5
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2600      	movs	r6, #0
 8000578:	42a6      	cmp	r6, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4d0b      	ldr	r5, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2600      	movs	r6, #0
 800058a:	42a6      	cmp	r6, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f855 3b04 	ldr.w	r3, [r5], #4
 8000594:	4798      	blx	r3
 8000596:	3601      	adds	r6, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f855 3b04 	ldr.w	r3, [r5], #4
 800059e:	4798      	blx	r3
 80005a0:	3601      	adds	r6, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005ec 	.word	0x080005ec
 80005a8:	080005ec 	.word	0x080005ec
 80005ac:	080005ec 	.word	0x080005ec
 80005b0:	080005f0 	.word	0x080005f0

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
